- write a placeholder instead of each expression {[<HERBIE-xy>]} where xy is the chronological number of the expression,
and write the actual expression into a file which herbie can process
- run herbie on the file
- use sed (or python) to insert the optimized expressions - the placeholder should be syntactically incorrect in C++ to avoid conflicts

- what to optimize?
    - global vars? - maybe could be left as a way the user can tell "i don't want to reorganize this" // support
    - arrays? - might go wrong with aliasing // support
    - function calls? - side effect problem, might get reordered // dont support

- support:
    - expressions
    - if/then/else / switch
    - for, while, dowhile
    - multiple functions in one file
    - optimize parameters of function calls (might be an expression)

- maybe support:
    - multiple input .cpp files // out of the box
    - a = b = 5 // throw error


a = some_expression

a = a ? b : c

double a;
if(...)
a =
else if (...)
a = ...
else
a = ...

<prefix_to_infix> (if (<= x0 -1.5627463366837976e+97) (/ (- (- (* 60.0 (/ x1 x0)) x0) x0) (* x1 2.0)) (if (<= x0 2.506841391836111e-56) (/ 1.0 (/ x1 (/ (- (sqrt (- (* x0 x0) (* (* x1 4.0) 30.0))) x0) 2.0))) (if (or (<= x0 3.3897478972757876e-46) (not (<= x0 8.182744289116371e+24))) (- (+ (* 900.0 (/ x1 (pow x0 3.0))) (/ 30.0 x0))) (* (/ (sqrt (- (sqrt (- (* x0 x0) (* (* x1 4.0) 30.0))) x0)) x1) (/ (sqrt (- (sqrt (- (* x0 x0) (* (* x1 4.0) 30.0))) x0)) 2.0))))) {'x0': 'b', 'x1': 'a'}
